name: CI-CD

on:
  push:
    branches: [ main ]

env:
  SOLUTION_PATH: "./src/FinancesManagementSystem.sln"

jobs:

  sonarscanner:
    runs-on: ubuntu-latest
    name: Test and SonarScanner 
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - uses: highbyte/sonarscan-dotnet@v2.1.2
        with:
          # The key of the SonarQube project
          sonarProjectKey: gpreviatti_FinancesManagementSystem
          # The name of the SonarQube project
          sonarProjectName:  FinancesManagementSystem
          # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.
          sonarOrganization: gpreviatti

          # Optional command arguments to 'dotnet build'
          dotnetBuildArguments: ${{ env.SOLUTION_PATH }} --configuration Release

          # Optional command arguments to 'dotnet test'
          dotnetTestArguments: |
              --filter AutoMapper ${{ env.SOLUTION_PATH }} --configuration Release --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover &&
                dotnet test --filter Controller ${{ env.SOLUTION_PATH }} --configuration Release --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover &&
                dotnet test --filter Service ${{ env.SOLUTION_PATH }} --configuration Release --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

          # Optional extra command arguments the the SonarScanner 'begin' command
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  push-to-docker:
    runs-on: ubuntu-latest
    name: Push to docker
    needs: [sonarscanner]
    steps:
      - uses: actions/checkout@v2

      - name: Docker Login
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PWD }}

      - name: Docker Build and Push Docker registry
        uses: docker/build-push-action@v2.7.0
        with:
          context: ./src
          file: ./src/Dockerfile
          push: true
          tags: |
            giov3nn10/finances-management-system:latest
            giov3nn10/finances-management-system:${{ github.run_number }}

  deploy-to-heroku:
    runs-on: ubuntu-latest
    name: Deploy to Heroku
    needs: [push-to-docker]
    steps:
      # Check-out your repository.
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build, Push and Release a Docker container to Heroku. # Your custom step name
        uses: gonuit/heroku-docker-deploy@v1.3.3 # GitHub action name (leave it as it is).
        with:
          # Below you must provide variables for your Heroku app.

          # The email address associated with your Heroku account.
          # If you don't want to use repository secrets (which is recommended) you can do:
          # email: my.email@example.com
          email: ${{ secrets.HEROKU_EMAIL }}
          
          # Heroku API key associated with provided user's email.
          # Api Key is available under your Heroku account settings.
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          
          # Name of the heroku application to which the build is to be sent.
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}

          # (Optional, default: "./")
          # Dockerfile directory.
          # For example, if you have a Dockerfile in the root of your project, leave it as follows:
          dockerfile_directory: ./src/

          # (Optional, default: "Dockerfile")
          # Dockerfile name.
          dockerfile_name: Heroku.Dockerfile

          # (Optional, default: "")
          # Additional options of docker build command.
          docker_options: "--no-cache"

          # (Optional, default: "web")
          # Select the process type for which you want the docker container to be uploaded.
          # By default, this argument is set to "web".
          # For more information look at https://devcenter.heroku.com/articles/process-model
          process_type: web
      